grammar Mex

  rule program
    v:vars? e:expression? <ProgramNode>
  end

  rule vars
    var ( space+ var )* space? <VarsDefinition>
  end

  rule var
    'var $' name:chars space? '=' space? ( string / expression ) ';' <VarDefinition>
  end

  rule varRef
    '$' name:chars <VarRef>
  end

  rule expression
    '('? ( integer / float / sumup / toa / varRef / arithmetic / metric ) ')'?  <ExpressionNode>
  end

  rule arithmetic
     ( '+' / '-' / '*' / '/' ) space oper1:expression space oper2:expression <ArithmeticNode>
  end

  rule metric # TODO externalize aggregates min, avg, median, max, sum, samples
     'metric(' space? metric_id:(string / varRef )  space? ',' space? aggregate:string space? ')'  <MetricNode>
  end

  rule sumup  # TODO limit to array types?
    'sumup(' space? operand:expression ')' <SumUpNode>
  end

  rule toa
    'toa(' space? operand:integer ')'  <ToANode>
  end

  rule integer
    ( '+' / '-')? [0-9]+ !'.' <IntegerLiteral>
  end

  rule string
    '"' ([^"\\] / "\\" . )* '"'
    {
      def value(_env=nil)
        elements[1].text_value
      end
    }
  end

  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+))  <FloatLiteral>
   end

   rule space
     [\s\n\t]+
   end

  rule chars
     [a-zA-Z]+
    {
      def value
        elements[0].text_value
      end
    }
  end

end